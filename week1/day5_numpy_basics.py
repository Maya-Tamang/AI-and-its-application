# -*- coding: utf-8 -*-
"""day5_numpy_basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oqByxBPlUPHxioxVVlEdj4rtx1BW22-E
"""

# Creating a numpy array and its attribute
import numpy as np

# my_list=[1,2,5,7,9]
# my_arr=np.array(my_list)
# print(my_arr)

#Creating 0-D array
# arr_0d=np.array(42)
# print(arr_0d)

#Creating 2-D array
# arr_2d=np.array([[1,2,3,4],[2,3,5,6,]])
# print(arr_2d)

#Creating 3-D array
arr_3d=np.array([[[1,2,3,4],[2,3,5,6,]],[[3,4,5,6],[4,9,0,3]]])
print(arr_3d)

"""#creating arary and its attribute"""

import numpy as np

arr=np.array([[1,2,3,4,5],[3,3,5,6,7]])
print(arr)
print(arr.shape)
print(arr.ndim)
print(arr.dtype)
print(arr.size)

"""#accesing 1D array"""

my_array=np.array([2,3,4,6,6,7])
print(my_array[4])

"""#Accessing 2D array"""

my_arr=np.array([[2,3,4,5,6],[3,8,0,4,5]])
print(my_arr[1,3])

"""#Accessing 3D array

"""

my_ar=np.array([[[1,2,5,6,7],[2,6,8,9,0]],[[2,6,0,8,4],[2,9,0,2,5]]])
print(my_ar[0,1,4])

"""#Negative indexing in numpy array"""

#negative indexing in 2D array elements
my_arr=np.array([[2,4,6,7,9,0,6],[1,8,0,5,4,3,2]])
print(my_arr[1,-2])

"""#Slicing in 1D Array"""

#array[start:end]
#array[start:end:step]

arr=np.array([1,2,4,5,75,65,63,67,88,21,3,5,6])
print(arr[1:5])
print(arr[1:7:2])
print(arr[1:8:2])
print(arr[0:-1])
print(arr[:-1])

"""#Slicing in 2D Array"""

arr_slice_2D=np.array([[2,3,4 ,6,7,8,9,1,2,0],[0,2,3,4,6,8,2,3,5,6]])
print(arr_slice_2D[1,1:-2])

"""#Slicing in 3D Array"""

arr_slice_3D=np.array([[[2,3,4,6,7,8,9,1,2,0],[0,2,3,4,6,8,2,3,5,6]],[[1,2,3,4,5,6,7,8,9,0],[0,2,3,5,6,7,86,88,45,43]]])
print(arr_slice_3D[1,0,3:-2])

"""#**Class Work**

#QN.1 print Numpy array
"""

#Create a numpy array from the list[7,14,21,28].print the array
arr=np.array([7,14,21,28])
print(arr)

"""#Q.2 Creating 2D array and using shape and ndim attribute"""

arr_2D=np.array([[5,10,15],[20,25,30]])
print(arr_2D.shape)
print(arr_2D.ndim)

"""#Q.3 Use np.zeros to create 2D array of shape(2,3) and use np.arrange to create array from 0 to 12 with a step 3"""

import numpy as np

zeros_array = np.zeros((2, 3))
print(zeros_array)

range_array = np.arange(0, 13, 3)
print(range_array)

"""#create numpy array[2,4,6,8] and multiply all element by 3 and print result

"""

num_array=np.array([2,4,6,8])
result=num_array*3
print(result)

"""#Create numpy array[1,3,5,7,9,11]and print third element and slice from index 1 to 3(inclusive)"""

num_arr=np.array([1,3,5,7,9,11])
print(num_arr[2])
print(num_arr[1:4])

"""#*Intermediate*

# 1. Create a 2D NumPy array of shape (3, 3) with random integers between 1 and 10
"""

import numpy as np
arr1 = np.random.randint(1, 11, (3, 3))
print("Original Array:", arr1)

arr1[arr1 > 5] = 0# Replace values greater than 5 with 0
print("Modified Array:", arr1)

"""# 2. Element-wise sum and dot product of two arrays

"""

a = np.array([2, 4, 6, 8])
b = np.array([1, 3, 5, 7])
print("Element wise Sum:", a + b)
print("Dot Product:", np.dot(a, b))

"""# 3. Create a 2D array of shape (4, 3) filled with ones, add [10, 20, 30] to each row

"""

arr3 = np.ones((4, 3))
addition = np.array([10, 20, 30])
result = arr3 + addition
print("Broadcasted Addition Result:\n", result)

"""# 4. Extract second column, compute mean, reshape to 1D array

"""

arr4 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
second_col = arr4[:, 1]
mean_val = np.mean(second_col)
reshaped = arr4.reshape(-1)
print("Second Column:", second_col)
print("Mean of Second Column:", mean_val)
print("Reshaped to 1D:", reshaped)

"""# 5. Use boolean mask on 1D array and square elements > 30

"""

arr5 = np.array([10, 20, 30, 40, 50, 60])
mask = arr5 > 30
modified = arr5.copy()
modified[mask] = modified[mask] ** 2
print("Original Array:", arr5)
print("Modified Array:", modified)

